package com.example.stockwatch;

import android.content.DialogInterface;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.InputFilter;
import android.text.InputType;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.EditText;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

public class MainActivity extends AppCompatActivity
{

    private static final String TAG = "MainActivity";
    public RecyclerView recyclerView;
    private SwipeRefreshLayout swiper;

    private StockAdapter stockAdapter;
    List<Stock> stockList = new ArrayList<Stock>();
    HashMap<String, String> initialMap;
    private DatabaseHandler databaseHandler;

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        Log.d(TAG, "onCreate: ");
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor("#000000")));

        doAsyncLoadInitialData();

        //stockList.add(new Stock("Test", "Amazon", 12.30, 0.50, 2.4));
        recyclerView = findViewById(R.id.recyclerView);
        stockAdapter = new StockAdapter(stockList, this);
        Collections.sort(stockList, Collections.<Stock>reverseOrder());
        recyclerView.setAdapter(stockAdapter);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));

        databaseHandler = new DatabaseHandler(this);

        swiper = (SwipeRefreshLayout)findViewById(R.id.swipeRefreshLayout);
        swiper.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                refreshData();
                //Set this to false else when the view is refreshed even if its task its done it shows the refreshing symbol
                swiper.setRefreshing(false);
            }
        });
    }


    //This method will fetch new data by service call.
    private void refreshData()
    {
        ArrayList<Stock> list = databaseHandler.loadStocks();
        list.addAll(stockList);
        stockList.clear();
        Log.d(TAG, "refreshData: stockList " + stockList);
        for(Stock st:list)
        {
            //Delete old stock from db.
            databaseHandler.deleteStock(st.getSymbol());

            MyAsyncTaskLoadFinancialDetails at = new MyAsyncTaskLoadFinancialDetails(this);
            at.execute(st.getSymbol());
        }
    }



    @Override
    protected void onResume() {
        //databaseHandler.dumpDbToLog();
        ArrayList<Stock> list = databaseHandler.loadStocks();
        stockList.clear();
        Log.d(TAG, "onResume: stockList " + stockList);
        stockList.addAll(list);
        Log.d(TAG, "onResume: " + list);
        Collections.sort(stockList, Collections.<Stock>reverseOrder());
        stockAdapter.notifyDataSetChanged();

        super.onResume();
    }

    @Override
    protected void onDestroy() {
        databaseHandler.shutDown();
        super.onDestroy();
    }

    //This method will load initial data and store it in a hashmap
    private void doAsyncLoadInitialData()
    {
        MyAsyncTask at = new MyAsyncTask(this);
        at.execute("");
    }

    //This method will populate map returned from service call by async task
      void populateInitialMap(HashMap<String, String> initialMap)
      {
          this.initialMap = initialMap;
      }

    //This method ensures that menu is visible on the main activity.
    @Override
    public boolean onCreateOptionsMenu(Menu menu)
    {
        getMenuInflater().inflate(R.menu.home_menu, menu);
        return true;
    }

    //This method performs action when any of the menu item is clicked.
    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {

        switch (item.getItemId())
        {
            case R.id.addStock:
                addStock();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    private void addStock()
    {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);

        // Create an edittext and set it to be the builder's view
        final EditText et = new EditText(this);
        et.setInputType(InputType.TYPE_CLASS_TEXT);
        //et.setFilters(new InputFilter[]{new InputFilter.AllCaps()});

        //
        ArrayList<InputFilter> curInputFilters = new ArrayList<InputFilter>(Arrays.asList(et.getFilters()));
        curInputFilters.add(0, new AlphabetClass());
        curInputFilters.add(1, new InputFilter.AllCaps());
        InputFilter[] newInputFilters = curInputFilters.toArray(new InputFilter[curInputFilters.size()]);
        et.setFilters(newInputFilters);
        //

        et.setGravity(Gravity.CENTER_HORIZONTAL);
        builder.setView(et);

        //builder.setIcon(R.drawable.icon1);

        builder.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id)
            {
                String symbol;
                if(! et.getText().toString().trim().isEmpty())
                    searchStock(et.getText().toString().trim().toLowerCase());
                else
                    Toast.makeText(MainActivity.this, "Company Name cannot be empty!", Toast.LENGTH_SHORT).show();

            }
        });
        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id)
            {
                Toast.makeText(MainActivity.this, "You changed your mind!", Toast.LENGTH_SHORT).show();
            }
        });

        builder.setMessage("Please Enter a Stock Symbol:");
        builder.setTitle("Stock Selection");

        AlertDialog dialog = builder.create();
        dialog.show();
    }

    //This method will search for stocks from stock map and will return correct symbol.
    private void searchStock(String symbol)
    {
        if(initialMap.containsKey(symbol.toLowerCase().trim()))
        {
            Log.d(TAG, "searchStock: found match symbol: "+ symbol);
            getSymbolDetails(symbol);
            //return symbol;
        }
        else
        {
            String resultSymbol = checkList(symbol);
        }

        //return "";
    }

    //This method will populate list of possible stock symbols to the user.
    private String checkList(String symbol)
    {
        List<String> dialogList = new ArrayList<>();
        for(String key:initialMap.keySet())
        {

            String value = (String)initialMap.get(key);
            if(((String)key).contains(symbol))
            {
                Log.d(TAG, "checkList: key: "+ key);
                dialogList.add((String)key.toUpperCase() + " - " + value);
            }

            //This code is for matching the input string with company names too.
//            else if(value.contains(symbol))
//            {
//                dialogList.add(key.toUpperCase() + " - " + value);
//            }
        }
        Log.d(TAG, "checkList: dialogList: "+ dialogList);
        String selectedSymbol = displaySymbolList(dialogList);
        return "";
    }

    //This method will display doalog with list of comapnies and allow user to select one.
    private String displaySymbolList(final List<String> dialogList)
    {
         //covert list into array of char sequence.
        final CharSequence[] sArray = new CharSequence[dialogList.size()];
        for (int i = 0; i < dialogList.size(); i++)
        {
            sArray[i] = dialogList.get(i);
        }

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Make a selection");
        //builder.setIcon(R.drawable.icon2);

        // Set the builder to display the string array as a selectable
        // list, and add the "onClick" for when a selection is made
        builder.setItems(sArray, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                String symbol = (dialogList.get(which));
                getSymbolDetails(symbol.split(" - ")[0]);
            }
        });

        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                Toast.makeText(MainActivity.this, "You changed your mind!", Toast.LENGTH_SHORT).show();
            }
        });
        AlertDialog dialog = builder.create();
        dialog.show();
        return "";
    }

    //This method will call service endpoint to fetch financial details of the symbol.
    private void getSymbolDetails(String symbol)
    {
        if(! symbol.isEmpty())
        {
            MyAsyncTaskLoadFinancialDetails at = new MyAsyncTaskLoadFinancialDetails(this);
            at.execute(symbol);
            Toast.makeText(MainActivity.this, "Stock found: " + symbol, Toast.LENGTH_SHORT).show();
        }
        else
            Toast.makeText(MainActivity.this, "Stock Name is empty!", Toast.LENGTH_SHORT).show();
    }

    public void addStocktoList(Stock stock)
    {
        //Check fro duplicates
        if(stockList.contains(stock))
        {
            stockList.remove(stock);
            databaseHandler.deleteStock(stock.getSymbol());
            Toast.makeText(MainActivity.this, "Duplicate Stocke Entry!", Toast.LENGTH_SHORT).show();
        }
        stockList.add(stock);
        Collections.sort(stockList, Collections.<Stock>reverseOrder());
        stockAdapter.notifyDataSetChanged();
        Log.d(TAG, "addStocktoList: stock added: